[
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncEngine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "FolderController",
        "importPath": "app.controllers.folder",
        "description": "app.controllers.folder",
        "isExtraImport": true,
        "detail": "app.controllers.folder",
        "documentation": {}
    },
    {
        "label": "get_async_session",
        "importPath": "app.database.deps",
        "description": "app.database.deps",
        "isExtraImport": true,
        "detail": "app.database.deps",
        "documentation": {}
    },
    {
        "label": "CreateFolder",
        "importPath": "app.schemas.folder",
        "description": "app.schemas.folder",
        "isExtraImport": true,
        "detail": "app.schemas.folder",
        "documentation": {}
    },
    {
        "label": "UpdateFolder",
        "importPath": "app.schemas.folder",
        "description": "app.schemas.folder",
        "isExtraImport": true,
        "detail": "app.schemas.folder",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Folder",
        "importPath": "app.models.folder",
        "description": "app.models.folder",
        "isExtraImport": true,
        "detail": "app.models.folder",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URI",
        "importPath": "app.config.config",
        "description": "app.config.config",
        "isExtraImport": true,
        "detail": "app.config.config",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URI",
        "importPath": "app.config.config",
        "description": "app.config.config",
        "isExtraImport": true,
        "detail": "app.config.config",
        "documentation": {}
    },
    {
        "label": "sqlalchemy_utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "UUIDType",
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "UUIDType",
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.database.session",
        "description": "app.database.session",
        "isExtraImport": true,
        "detail": "app.database.session",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.database.session",
        "description": "app.database.session",
        "isExtraImport": true,
        "detail": "app.database.session",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.apis",
        "description": "app.apis",
        "isExtraImport": true,
        "detail": "app.apis",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "Connection",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "folder_router",
        "kind": 5,
        "importPath": "app.apis.folder",
        "description": "app.apis.folder",
        "peekOfCode": "folder_router = APIRouter(prefix=\"/folder\", tags=[\"Folders\"])\n@folder_router.get(path=\"\", summary=\"모든 폴더 가져오기\")\nasync def get_folder(\n    f: Optional[UUID] = Query(None, description=\"폴더 고유 아이디\"),\n    session: AsyncSession = Depends(get_async_session),\n):\n    return await FolderController.get_folder(session, uuid=f)\n@folder_router.post(path=\"\", summary=\"폴더 생성\")\nasync def make_folder(\n    data: CreateFolder, session: AsyncSession = Depends(get_async_session)",
        "detail": "app.apis.folder",
        "documentation": {}
    },
    {
        "label": "photo_router",
        "kind": 5,
        "importPath": "app.apis.photo",
        "description": "app.apis.photo",
        "peekOfCode": "photo_router = APIRouter(prefix=\"/photo\", tags=[\"Photos\"])",
        "detail": "app.apis.photo",
        "documentation": {}
    },
    {
        "label": "get_env",
        "kind": 2,
        "importPath": "app.config.config",
        "description": "app.config.config",
        "peekOfCode": "def get_env():\n    return os.getenv(\"APP_ENV\", \"local\")\ndef create_database_uri() -> str:\n    host = os.getenv(\"DB_HOST\")\n    port = os.getenv(\"DB_PORT\")\n    dbname = os.getenv(\"DB_NAME\")\n    username = os.getenv(\"DB_USERNAME\")\n    password = os.getenv(\"DB_PASSWORD\")\n    return f\"mysql+aiomysql://{username}:{password}@{host}:{port}/{dbname}\"\ndef get_database_uri() -> str:",
        "detail": "app.config.config",
        "documentation": {}
    },
    {
        "label": "create_database_uri",
        "kind": 2,
        "importPath": "app.config.config",
        "description": "app.config.config",
        "peekOfCode": "def create_database_uri() -> str:\n    host = os.getenv(\"DB_HOST\")\n    port = os.getenv(\"DB_PORT\")\n    dbname = os.getenv(\"DB_NAME\")\n    username = os.getenv(\"DB_USERNAME\")\n    password = os.getenv(\"DB_PASSWORD\")\n    return f\"mysql+aiomysql://{username}:{password}@{host}:{port}/{dbname}\"\ndef get_database_uri() -> str:\n    app_env = get_env()\n    env_file_name = f\"envs/.env.{app_env}\"",
        "detail": "app.config.config",
        "documentation": {}
    },
    {
        "label": "get_database_uri",
        "kind": 2,
        "importPath": "app.config.config",
        "description": "app.config.config",
        "peekOfCode": "def get_database_uri() -> str:\n    app_env = get_env()\n    env_file_name = f\"envs/.env.{app_env}\"\n    load_dotenv(dotenv_path=env_file_name)\n    return create_database_uri()\nSQLALCHEMY_DATABASE_URI: str = get_database_uri()",
        "detail": "app.config.config",
        "documentation": {}
    },
    {
        "label": "FolderController",
        "kind": 6,
        "importPath": "app.controllers.folder",
        "description": "app.controllers.folder",
        "peekOfCode": "class FolderController:\n    async def get_folder(session: AsyncSession, uuid: str):\n        if uuid is None:\n            stmt = select(Folder).where((Folder.deleted_at.is_(None)))\n            result = await session.execute(stmt)\n            folders = result.scalars().all()\n            return folders\n        else:\n            stmt = select(Folder).where(\n                (Folder.deleted_at.is_(None)) & (Folder.uuid == uuid)",
        "detail": "app.controllers.folder",
        "documentation": {}
    },
    {
        "label": "PhotoController",
        "kind": 6,
        "importPath": "app.controllers.photo",
        "description": "app.controllers.photo",
        "peekOfCode": "class PhotoController:\n    async def get_photo_list(folder_id: str):\n        return\n    async def get_photo(folder_id: str, uuid: str):\n        return\n    async def make_photo(folder_id: str, memo: str, files: any):\n        return\n    async def move_photo(folder_id: str, photos: List[str]):\n        return\n    async def delete_photo(uuid: str):",
        "detail": "app.controllers.photo",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.database.session",
        "description": "app.database.session",
        "peekOfCode": "engine = create_async_engine(\n    SQLALCHEMY_DATABASE_URI,\n    pool_pre_ping=True,\n    pool_size=15,\n    max_overflow=0,\n)\nasync_session = sessionmaker(\n    bind=engine,\n    class_=AsyncSession,\n    autoflush=False,",
        "detail": "app.database.session",
        "documentation": {}
    },
    {
        "label": "async_session",
        "kind": 5,
        "importPath": "app.database.session",
        "description": "app.database.session",
        "peekOfCode": "async_session = sessionmaker(\n    bind=engine,\n    class_=AsyncSession,\n    autoflush=False,\n    autocommit=False,\n    expire_on_commit=False,\n)\nBase = declarative_base()",
        "detail": "app.database.session",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.database.session",
        "description": "app.database.session",
        "peekOfCode": "Base = declarative_base()",
        "detail": "app.database.session",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.models.base",
        "description": "app.models.base",
        "peekOfCode": "Base = declarative_base()",
        "detail": "app.models.base",
        "documentation": {}
    },
    {
        "label": "Folder",
        "kind": 6,
        "importPath": "app.models.folder",
        "description": "app.models.folder",
        "peekOfCode": "class Folder(Base):\n    __tablename__ = \"folder\"\n    __table_args__ = {\"comment\": \"사진첩 폴더\"}\n    uuid: UUID = Column(\n        UUIDType(binary=False),\n        primary_key=True,\n        unique=True,\n        default=uuid4,\n        comment=\"폴더 UUID, Front 제공용 ID\",\n    )",
        "detail": "app.models.folder",
        "documentation": {}
    },
    {
        "label": "Photo",
        "kind": 6,
        "importPath": "app.models.photo",
        "description": "app.models.photo",
        "peekOfCode": "class Photo(Base):\n    __tablename__ = \"photo\"\n    __table_args__ = {\"comment\": \"포토북, 사진 데이터\"}\n    uuid: UUID = Column(\n        UUIDType(binary=False),\n        primary_key=True,\n        unique=True,\n        default=uuid4,\n        comment=\"사진 UUID, Front 제공용 ID\",\n    )",
        "detail": "app.models.photo",
        "documentation": {}
    },
    {
        "label": "GetFolder",
        "kind": 6,
        "importPath": "app.schemas.folder",
        "description": "app.schemas.folder",
        "peekOfCode": "class GetFolder(BaseModel):\n    uuid: UUID\n    class Config:\n        orm_mode = True\nclass CreateFolder(BaseModel):\n    name: str\n    class Config:\n        orm_mode = True\nclass UpdateFolder(BaseModel):\n    name: str",
        "detail": "app.schemas.folder",
        "documentation": {}
    },
    {
        "label": "CreateFolder",
        "kind": 6,
        "importPath": "app.schemas.folder",
        "description": "app.schemas.folder",
        "peekOfCode": "class CreateFolder(BaseModel):\n    name: str\n    class Config:\n        orm_mode = True\nclass UpdateFolder(BaseModel):\n    name: str\n    class Config:\n        orm_mode = True\nclass DeleteFolder(BaseModel):\n    uuid: UUID",
        "detail": "app.schemas.folder",
        "documentation": {}
    },
    {
        "label": "UpdateFolder",
        "kind": 6,
        "importPath": "app.schemas.folder",
        "description": "app.schemas.folder",
        "peekOfCode": "class UpdateFolder(BaseModel):\n    name: str\n    class Config:\n        orm_mode = True\nclass DeleteFolder(BaseModel):\n    uuid: UUID\n    class Config:\n        orm_mode = True",
        "detail": "app.schemas.folder",
        "documentation": {}
    },
    {
        "label": "DeleteFolder",
        "kind": 6,
        "importPath": "app.schemas.folder",
        "description": "app.schemas.folder",
        "peekOfCode": "class DeleteFolder(BaseModel):\n    uuid: UUID\n    class Config:\n        orm_mode = True",
        "detail": "app.schemas.folder",
        "documentation": {}
    },
    {
        "label": "GetPhoto",
        "kind": 6,
        "importPath": "app.schemas.photo",
        "description": "app.schemas.photo",
        "peekOfCode": "class GetPhoto(BaseModel):\n    uuid: UUID\n    class Config:\n        orm_mode = True\nclass CreatePhoto(BaseModel):\n    name: str\n    class Config:\n        orm_mode = True\nclass UpdatePhoto(BaseModel):\n    uuid: UUID",
        "detail": "app.schemas.photo",
        "documentation": {}
    },
    {
        "label": "CreatePhoto",
        "kind": 6,
        "importPath": "app.schemas.photo",
        "description": "app.schemas.photo",
        "peekOfCode": "class CreatePhoto(BaseModel):\n    name: str\n    class Config:\n        orm_mode = True\nclass UpdatePhoto(BaseModel):\n    uuid: UUID\n    name: str\n    class Config:\n        orm_mode = True\nclass DeletePhoto(BaseModel):",
        "detail": "app.schemas.photo",
        "documentation": {}
    },
    {
        "label": "UpdatePhoto",
        "kind": 6,
        "importPath": "app.schemas.photo",
        "description": "app.schemas.photo",
        "peekOfCode": "class UpdatePhoto(BaseModel):\n    uuid: UUID\n    name: str\n    class Config:\n        orm_mode = True\nclass DeletePhoto(BaseModel):\n    uuid: UUID\n    class Config:\n        orm_mode = True",
        "detail": "app.schemas.photo",
        "documentation": {}
    },
    {
        "label": "DeletePhoto",
        "kind": 6,
        "importPath": "app.schemas.photo",
        "description": "app.schemas.photo",
        "peekOfCode": "class DeletePhoto(BaseModel):\n    uuid: UUID\n    class Config:\n        orm_mode = True",
        "detail": "app.schemas.photo",
        "documentation": {}
    },
    {
        "label": "register_router",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def register_router(application: FastAPI):\n    application.include_router(router=router)\ndef create_application() -> FastAPI:\n    application = FastAPI(\n        title=\"Gary API\",\n        version=\"1.0.0\",\n        openapi_url=\"/openapi.json\",\n        redoc_url=\"/redoc\",\n        docs_url=\"/docs\",\n    )",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "create_application",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def create_application() -> FastAPI:\n    application = FastAPI(\n        title=\"Gary API\",\n        version=\"1.0.0\",\n        openapi_url=\"/openapi.json\",\n        redoc_url=\"/redoc\",\n        docs_url=\"/docs\",\n    )\n    register_router(application)\n    return application",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = create_application()",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.0.0.1_create_folder_photo",
        "description": "migrations.versions.0.0.1_create_folder_photo",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"folder\",\n        sa.Column(\n            \"uuid\",\n            sqlalchemy_utils.types.uuid.UUIDType(binary=False),\n            nullable=False,\n            comment=\"폴더 UUID, Front 제공용 ID\",\n        ),",
        "detail": "migrations.versions.0.0.1_create_folder_photo",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.0.0.1_create_folder_photo",
        "description": "migrations.versions.0.0.1_create_folder_photo",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table(\"photo\")\n    op.drop_table(\"folder\")\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.0.0.1_create_folder_photo",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migrations.versions.0.0.1_create_folder_photo",
        "description": "migrations.versions.0.0.1_create_folder_photo",
        "peekOfCode": "revision = \"0.0.1\"\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"folder\",\n        sa.Column(\n            \"uuid\",",
        "detail": "migrations.versions.0.0.1_create_folder_photo",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migrations.versions.0.0.1_create_folder_photo",
        "description": "migrations.versions.0.0.1_create_folder_photo",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"folder\",\n        sa.Column(\n            \"uuid\",\n            sqlalchemy_utils.types.uuid.UUIDType(binary=False),",
        "detail": "migrations.versions.0.0.1_create_folder_photo",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migrations.versions.0.0.1_create_folder_photo",
        "description": "migrations.versions.0.0.1_create_folder_photo",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"folder\",\n        sa.Column(\n            \"uuid\",\n            sqlalchemy_utils.types.uuid.UUIDType(binary=False),\n            nullable=False,",
        "detail": "migrations.versions.0.0.1_create_folder_photo",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migrations.versions.0.0.1_create_folder_photo",
        "description": "migrations.versions.0.0.1_create_folder_photo",
        "peekOfCode": "depends_on = None\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"folder\",\n        sa.Column(\n            \"uuid\",\n            sqlalchemy_utils.types.uuid.UUIDType(binary=False),\n            nullable=False,\n            comment=\"폴더 UUID, Front 제공용 ID\",",
        "detail": "migrations.versions.0.0.1_create_folder_photo",
        "documentation": {}
    },
    {
        "label": "do_run_migrations",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def do_run_migrations(connection: Connection) -> None:\n    context.configure(\n        connection=connection,\n        target_metadata=target_metadata,\n        compare_type=True,\n    )\n    with context.begin_transaction():\n        context.run_migrations()\ndef run_migrations_offline() -> None:\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(\n        url=url,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n    )\n    with context.begin_transaction():\n        context.run_migrations()",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "config = context.config\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\ntarget_metadata = Base.metadata\nconfig.set_main_option(\"sqlalchemy.url\", SQLALCHEMY_DATABASE_URI)\ndef do_run_migrations(connection: Connection) -> None:\n    context.configure(\n        connection=connection,\n        target_metadata=target_metadata,\n        compare_type=True,",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "target_metadata = Base.metadata\nconfig.set_main_option(\"sqlalchemy.url\", SQLALCHEMY_DATABASE_URI)\ndef do_run_migrations(connection: Connection) -> None:\n    context.configure(\n        connection=connection,\n        target_metadata=target_metadata,\n        compare_type=True,\n    )\n    with context.begin_transaction():\n        context.run_migrations()",
        "detail": "migrations.env",
        "documentation": {}
    }
]